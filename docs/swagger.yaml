basePath: /
definitions:
  handlers.CreateLeaderboardEntryRequest:
    properties:
      last_updated:
        example: "2023-01-01T00:00:00Z"
        type: string
      leaderboard_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      participant_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      rank:
        example: 1
        minimum: 1
        type: integer
      score:
        example: 100.5
        type: number
    required:
    - leaderboard_id
    - participant_id
    - rank
    - score
    type: object
  handlers.CreateLeaderboardMetricRequest:
    properties:
      display_priority:
        example: 0
        minimum: 0
        type: integer
      leaderboard_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      metric_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      weight:
        example: 1
        minimum: 0
        type: number
    required:
    - leaderboard_id
    - metric_id
    - weight
    type: object
  handlers.CreateLeaderboardRequest:
    properties:
      category:
        example: tournament
        type: string
      description:
        example: Weekly tournament for active players
        type: string
      end_date:
        example: "2023-01-07T23:59:59Z"
        type: string
      is_active:
        example: true
        type: boolean
      max_entries:
        example: 100
        minimum: 1
        type: integer
      name:
        example: Weekly Tournament
        type: string
      sort_order:
        enum:
        - ascending
        - descending
        example: descending
        type: string
      start_date:
        example: "2023-01-01T00:00:00Z"
        type: string
      time_frame:
        enum:
        - daily
        - weekly
        - monthly
        - yearly
        - all-time
        - custom
        example: weekly
        type: string
      type:
        enum:
        - individual
        - team
        example: individual
        type: string
      visibility_scope:
        enum:
        - public
        - private
        example: public
        type: string
    required:
    - category
    - name
    - sort_order
    - time_frame
    - type
    - visibility_scope
    type: object
  handlers.CreateParticipantRequest:
    properties:
      external_id:
        example: external-123
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        example: John Doe
        type: string
      type:
        enum:
        - individual
        - team
        - group
        example: individual
        type: string
    required:
    - name
    - type
    type: object
  handlers.LeaderboardEntryResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      last_updated:
        example: "2023-01-01T00:00:00Z"
        type: string
      leaderboard_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      participant_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      rank:
        example: 1
        type: integer
      score:
        example: 100.5
        type: number
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  handlers.LeaderboardMetricResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      display_priority:
        example: 0
        type: integer
      id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      leaderboard_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      metric_id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      weight:
        example: 1
        type: number
    type: object
  handlers.LeaderboardResponse:
    properties:
      category:
        example: tournament
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Weekly tournament for active players
        type: string
      end_date:
        example: "2023-01-07T23:59:59Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_active:
        example: true
        type: boolean
      max_entries:
        example: 100
        type: integer
      name:
        example: Weekly Tournament
        type: string
      sort_order:
        example: descending
        type: string
      start_date:
        example: "2023-01-01T00:00:00Z"
        type: string
      time_frame:
        example: weekly
        type: string
      type:
        example: individual
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      visibility_scope:
        example: public
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      role:
        example: admin
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  handlers.ParticipantResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      external_id:
        example: external-123
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        example: John Doe
        type: string
      type:
        example: individual
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securepass123
        type: string
      username:
        example: newuser
        type: string
    type: object
  handlers.UpdateLeaderboardEntryRequest:
    properties:
      last_updated:
        example: "2023-01-02T00:00:00Z"
        type: string
      rank:
        example: 2
        minimum: 1
        type: integer
      score:
        example: 200.75
        type: number
    type: object
  handlers.UpdateLeaderboardMetricRequest:
    properties:
      display_priority:
        example: 1
        minimum: 0
        type: integer
      weight:
        example: 2.5
        minimum: 0
        type: number
    type: object
  handlers.UpdateLeaderboardRequest:
    properties:
      category:
        example: competition
        type: string
      description:
        example: Updated description
        type: string
      end_date:
        example: "2023-02-28T23:59:59Z"
        type: string
      is_active:
        example: false
        type: boolean
      max_entries:
        example: 50
        minimum: 1
        type: integer
      name:
        example: Updated Tournament
        type: string
      sort_order:
        enum:
        - ascending
        - descending
        example: ascending
        type: string
      start_date:
        example: "2023-02-01T00:00:00Z"
        type: string
      time_frame:
        enum:
        - daily
        - weekly
        - monthly
        - yearly
        - all-time
        - custom
        example: monthly
        type: string
      type:
        enum:
        - individual
        - team
        example: team
        type: string
      visibility_scope:
        enum:
        - public
        - private
        example: private
        type: string
    type: object
  handlers.UpdateParticipantRequest:
    properties:
      external_id:
        example: external-123
        type: string
      metadata:
        additionalProperties: true
        type: object
      name:
        example: Jane Doe
        type: string
      type:
        enum:
        - individual
        - team
        - group
        example: team
        type: string
    type: object
  middleware.ErrorResponse:
    properties:
      error: {}
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: API for managing leaderboards, entries, participants, and metrics
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Leaderboard Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and generate a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration data
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /leaderboard-entries:
    get:
      consumes:
      - application/json
      description: Get a list of all entries/rankings for a specific leaderboard
      parameters:
      - description: Filter by leaderboard ID
        in: query
        name: leaderboard_id
        type: string
      - description: Filter by participant ID
        in: query
        name: participant_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of leaderboard entries
          schema:
            items:
              $ref: '#/definitions/handlers.LeaderboardEntryResponse'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all entries for a leaderboard
      tags:
      - leaderboard-entries
    post:
      consumes:
      - application/json
      description: Create a new entry/ranking in a leaderboard
      parameters:
      - description: Leaderboard entry data
        in: body
        name: entry
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateLeaderboardEntryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created leaderboard entry
          schema:
            $ref: '#/definitions/handlers.LeaderboardEntryResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Leaderboard or participant not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new leaderboard entry
      tags:
      - leaderboard-entries
  /leaderboard-entries/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a leaderboard entry by its ID
      parameters:
      - description: Leaderboard Entry ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a leaderboard entry
      tags:
      - leaderboard-entries
    get:
      consumes:
      - application/json
      description: Retrieve a leaderboard entry by its unique ID
      parameters:
      - description: Leaderboard Entry ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Leaderboard entry details
          schema:
            $ref: '#/definitions/handlers.LeaderboardEntryResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a leaderboard entry by ID
      tags:
      - leaderboard-entries
    put:
      consumes:
      - application/json
      description: Update an existing leaderboard entry with the provided details
      parameters:
      - description: Leaderboard Entry ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated leaderboard entry data
        in: body
        name: entry
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateLeaderboardEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated leaderboard entry
          schema:
            $ref: '#/definitions/handlers.LeaderboardEntryResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a leaderboard entry
      tags:
      - leaderboard-entries
  /leaderboard-metrics:
    get:
      consumes:
      - application/json
      description: Get a list of all metrics associated with a specific leaderboard
      parameters:
      - description: Filter by leaderboard ID
        in: query
        name: leaderboard_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of leaderboard metrics
          schema:
            items:
              $ref: '#/definitions/handlers.LeaderboardMetricResponse'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all metrics for a leaderboard
      tags:
      - leaderboard-metrics
    post:
      consumes:
      - application/json
      description: Create a new metric for a leaderboard
      parameters:
      - description: Leaderboard metric data
        in: body
        name: metric
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateLeaderboardMetricRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created leaderboard metric
          schema:
            $ref: '#/definitions/handlers.LeaderboardMetricResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Leaderboard or metric not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new leaderboard metric
      tags:
      - leaderboard-metrics
  /leaderboard-metrics/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a leaderboard metric by its ID
      parameters:
      - description: Leaderboard Metric ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a leaderboard metric
      tags:
      - leaderboard-metrics
    get:
      consumes:
      - application/json
      description: Retrieve a leaderboard metric by its unique ID
      parameters:
      - description: Leaderboard Metric ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Leaderboard metric details
          schema:
            $ref: '#/definitions/handlers.LeaderboardMetricResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a leaderboard metric by ID
      tags:
      - leaderboard-metrics
    put:
      consumes:
      - application/json
      description: Update an existing leaderboard metric with the provided details
      parameters:
      - description: Leaderboard Metric ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated leaderboard metric data
        in: body
        name: metric
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateLeaderboardMetricRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated leaderboard metric
          schema:
            $ref: '#/definitions/handlers.LeaderboardMetricResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a leaderboard metric
      tags:
      - leaderboard-metrics
  /leaderboards:
    get:
      consumes:
      - application/json
      description: Get a list of all leaderboards
      produces:
      - application/json
      responses:
        "200":
          description: List of leaderboards
          schema:
            items:
              $ref: '#/definitions/handlers.LeaderboardResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all leaderboards
      tags:
      - leaderboards
    post:
      consumes:
      - application/json
      description: Create a new leaderboard with the provided details
      parameters:
      - description: Leaderboard data
        in: body
        name: leaderboard
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateLeaderboardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created leaderboard
          schema:
            $ref: '#/definitions/handlers.LeaderboardResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new leaderboard
      tags:
      - leaderboards
  /leaderboards/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a leaderboard by its ID
      parameters:
      - description: Leaderboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a leaderboard
      tags:
      - leaderboards
    get:
      consumes:
      - application/json
      description: Retrieve a leaderboard by its unique ID
      parameters:
      - description: Leaderboard ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Leaderboard details
          schema:
            $ref: '#/definitions/handlers.LeaderboardResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a leaderboard by ID
      tags:
      - leaderboards
    put:
      consumes:
      - application/json
      description: Update an existing leaderboard with the provided details
      parameters:
      - description: Leaderboard ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated leaderboard data
        in: body
        name: leaderboard
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateLeaderboardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated leaderboard
          schema:
            $ref: '#/definitions/handlers.LeaderboardResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a leaderboard
      tags:
      - leaderboards
  /participants:
    get:
      consumes:
      - application/json
      description: Get a list of all participants
      produces:
      - application/json
      responses:
        "200":
          description: List of participants
          schema:
            items:
              $ref: '#/definitions/handlers.ParticipantResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all participants
      tags:
      - participants
    post:
      consumes:
      - application/json
      description: Create a new participant with the provided details
      parameters:
      - description: Participant data
        in: body
        name: participant
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateParticipantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created participant
          schema:
            $ref: '#/definitions/handlers.ParticipantResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new participant
      tags:
      - participants
  /participants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a participant by its ID
      parameters:
      - description: Participant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a participant
      tags:
      - participants
    get:
      consumes:
      - application/json
      description: Retrieve a participant by its unique ID
      parameters:
      - description: Participant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Participant details
          schema:
            $ref: '#/definitions/handlers.ParticipantResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a participant by ID
      tags:
      - participants
    put:
      consumes:
      - application/json
      description: Update an existing participant with the provided details
      parameters:
      - description: Participant ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated participant data
        in: body
        name: participant
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateParticipantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated participant
          schema:
            $ref: '#/definitions/handlers.ParticipantResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a participant
      tags:
      - participants
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
